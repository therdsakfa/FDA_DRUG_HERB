'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LGT_NCT2")>  _
Partial Public Class Linq_NCTDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMAS_NCT_LOCATION_TYPE(instance As MAS_NCT_LOCATION_TYPE)
    End Sub
  Partial Private Sub UpdateMAS_NCT_LOCATION_TYPE(instance As MAS_NCT_LOCATION_TYPE)
    End Sub
  Partial Private Sub DeleteMAS_NCT_LOCATION_TYPE(instance As MAS_NCT_LOCATION_TYPE)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("LGT_NCT2ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property MAS_NCT_LOCATION_TYPEs() As System.Data.Linq.Table(Of MAS_NCT_LOCATION_TYPE)
		Get
			Return Me.GetTable(Of MAS_NCT_LOCATION_TYPE)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MAS_NCT_LOCATION_TYPE")>  _
Partial Public Class MAS_NCT_LOCATION_TYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDA As Integer
	
	Private _NCT_LOCATION_TYPE_ID As String
	
	Private _NCT_LOCATION_TYPE_NAME As String
	
	Private _NCT_LOCATION_TYPE_GROUP As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDAChanged()
    End Sub
    Partial Private Sub OnNCT_LOCATION_TYPE_IDChanging(value As String)
    End Sub
    Partial Private Sub OnNCT_LOCATION_TYPE_IDChanged()
    End Sub
    Partial Private Sub OnNCT_LOCATION_TYPE_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnNCT_LOCATION_TYPE_NAMEChanged()
    End Sub
    Partial Private Sub OnNCT_LOCATION_TYPE_GROUPChanging(value As String)
    End Sub
    Partial Private Sub OnNCT_LOCATION_TYPE_GROUPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDA() As Integer
		Get
			Return Me._IDA
		End Get
		Set
			If ((Me._IDA = value)  _
						= false) Then
				Me.OnIDAChanging(value)
				Me.SendPropertyChanging
				Me._IDA = value
				Me.SendPropertyChanged("IDA")
				Me.OnIDAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCT_LOCATION_TYPE_ID", DbType:="NVarChar(MAX)")>  _
	Public Property NCT_LOCATION_TYPE_ID() As String
		Get
			Return Me._NCT_LOCATION_TYPE_ID
		End Get
		Set
			If (String.Equals(Me._NCT_LOCATION_TYPE_ID, value) = false) Then
				Me.OnNCT_LOCATION_TYPE_IDChanging(value)
				Me.SendPropertyChanging
				Me._NCT_LOCATION_TYPE_ID = value
				Me.SendPropertyChanged("NCT_LOCATION_TYPE_ID")
				Me.OnNCT_LOCATION_TYPE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCT_LOCATION_TYPE_NAME", DbType:="NVarChar(MAX)")>  _
	Public Property NCT_LOCATION_TYPE_NAME() As String
		Get
			Return Me._NCT_LOCATION_TYPE_NAME
		End Get
		Set
			If (String.Equals(Me._NCT_LOCATION_TYPE_NAME, value) = false) Then
				Me.OnNCT_LOCATION_TYPE_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._NCT_LOCATION_TYPE_NAME = value
				Me.SendPropertyChanged("NCT_LOCATION_TYPE_NAME")
				Me.OnNCT_LOCATION_TYPE_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NCT_LOCATION_TYPE_GROUP", DbType:="NVarChar(MAX)")>  _
	Public Property NCT_LOCATION_TYPE_GROUP() As String
		Get
			Return Me._NCT_LOCATION_TYPE_GROUP
		End Get
		Set
			If (String.Equals(Me._NCT_LOCATION_TYPE_GROUP, value) = false) Then
				Me.OnNCT_LOCATION_TYPE_GROUPChanging(value)
				Me.SendPropertyChanging
				Me._NCT_LOCATION_TYPE_GROUP = value
				Me.SendPropertyChanged("NCT_LOCATION_TYPE_GROUP")
				Me.OnNCT_LOCATION_TYPE_GROUPChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

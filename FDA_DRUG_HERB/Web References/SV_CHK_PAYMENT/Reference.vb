'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace SV_CHK_PAYMENT
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SV_CHECK_PAYMENTSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SV_CHECK_PAYMENT
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CHECK_PAYMENTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CHECK_PRICEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SPM_CANCELOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FDA_DRUG_HERB.My.MySettings.Default.FDA_DRUG_HERB_SV_CHK_PAYMENT_SV_CHECK_PAYMENT
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CHECK_PAYMENTCompleted As CHECK_PAYMENTCompletedEventHandler
        
        '''<remarks/>
        Public Event CHECK_PRICECompleted As CHECK_PRICECompletedEventHandler
        
        '''<remarks/>
        Public Event SPM_CANCELCompleted As SPM_CANCELCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CHECK_PAYMENT", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CHECK_PAYMENT(ByVal refno As String, ByVal identify As String, ByVal system As Integer) As String
            Dim results() As Object = Me.Invoke("CHECK_PAYMENT", New Object() {refno, identify, system})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CHECK_PAYMENTAsync(ByVal refno As String, ByVal identify As String, ByVal system As Integer)
            Me.CHECK_PAYMENTAsync(refno, identify, system, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CHECK_PAYMENTAsync(ByVal refno As String, ByVal identify As String, ByVal system As Integer, ByVal userState As Object)
            If (Me.CHECK_PAYMENTOperationCompleted Is Nothing) Then
                Me.CHECK_PAYMENTOperationCompleted = AddressOf Me.OnCHECK_PAYMENTOperationCompleted
            End If
            Me.InvokeAsync("CHECK_PAYMENT", New Object() {refno, identify, system}, Me.CHECK_PAYMENTOperationCompleted, userState)
        End Sub
        
        Private Sub OnCHECK_PAYMENTOperationCompleted(ByVal arg As Object)
            If (Not (Me.CHECK_PAYMENTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CHECK_PAYMENTCompleted(Me, New CHECK_PAYMENTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CHECK_PRICE", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CHECK_PRICE(ByVal refno As String, ByVal identify As String) As String
            Dim results() As Object = Me.Invoke("CHECK_PRICE", New Object() {refno, identify})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CHECK_PRICEAsync(ByVal refno As String, ByVal identify As String)
            Me.CHECK_PRICEAsync(refno, identify, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CHECK_PRICEAsync(ByVal refno As String, ByVal identify As String, ByVal userState As Object)
            If (Me.CHECK_PRICEOperationCompleted Is Nothing) Then
                Me.CHECK_PRICEOperationCompleted = AddressOf Me.OnCHECK_PRICEOperationCompleted
            End If
            Me.InvokeAsync("CHECK_PRICE", New Object() {refno, identify}, Me.CHECK_PRICEOperationCompleted, userState)
        End Sub
        
        Private Sub OnCHECK_PRICEOperationCompleted(ByVal arg As Object)
            If (Not (Me.CHECK_PRICECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CHECK_PRICECompleted(Me, New CHECK_PRICECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SPM_CANCEL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SPM_CANCEL(ByVal IDA As Integer) As Integer
            Dim results() As Object = Me.Invoke("SPM_CANCEL", New Object() {IDA})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SPM_CANCELAsync(ByVal IDA As Integer)
            Me.SPM_CANCELAsync(IDA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SPM_CANCELAsync(ByVal IDA As Integer, ByVal userState As Object)
            If (Me.SPM_CANCELOperationCompleted Is Nothing) Then
                Me.SPM_CANCELOperationCompleted = AddressOf Me.OnSPM_CANCELOperationCompleted
            End If
            Me.InvokeAsync("SPM_CANCEL", New Object() {IDA}, Me.SPM_CANCELOperationCompleted, userState)
        End Sub
        
        Private Sub OnSPM_CANCELOperationCompleted(ByVal arg As Object)
            If (Not (Me.SPM_CANCELCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SPM_CANCELCompleted(Me, New SPM_CANCELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub CHECK_PAYMENTCompletedEventHandler(ByVal sender As Object, ByVal e As CHECK_PAYMENTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CHECK_PAYMENTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub CHECK_PRICECompletedEventHandler(ByVal sender As Object, ByVal e As CHECK_PRICECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CHECK_PRICECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SPM_CANCELCompletedEventHandler(ByVal sender As Object, ByVal e As SPM_CANCELCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SPM_CANCELCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace

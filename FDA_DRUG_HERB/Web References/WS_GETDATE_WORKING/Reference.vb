'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WS_GETDATE_WORKING
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BasicHttpBinding_IService1", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class BasicHttpBinding_IService1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GETDATE_WORKINGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GETDATE_COUNT_DAYOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FDA_DRUG_HERB.My.MySettings.Default.FDA_DRUG_HERB_WS_GETDATE_WORKING_Service1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GETDATE_WORKINGCompleted As GETDATE_WORKINGCompletedEventHandler
        
        '''<remarks/>
        Public Event GETDATE_COUNT_DAYCompleted As GETDATE_COUNT_DAYCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GETDATE_WORKING", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GETDATE_WORKING(ByVal S_DATE As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal S_DATESpecified As Boolean, ByVal days As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal daysSpecified As Boolean, ByRef GETDATE_WORKINGResult As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef GETDATE_WORKINGResultSpecified As Boolean)
            Dim results() As Object = Me.Invoke("GETDATE_WORKING", New Object() {S_DATE, S_DATESpecified, days, daysSpecified})
            GETDATE_WORKINGResult = CType(results(0),Date)
            GETDATE_WORKINGResultSpecified = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_WORKINGAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal days As Integer, ByVal daysSpecified As Boolean)
            Me.GETDATE_WORKINGAsync(S_DATE, S_DATESpecified, days, daysSpecified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_WORKINGAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal days As Integer, ByVal daysSpecified As Boolean, ByVal userState As Object)
            If (Me.GETDATE_WORKINGOperationCompleted Is Nothing) Then
                Me.GETDATE_WORKINGOperationCompleted = AddressOf Me.OnGETDATE_WORKINGOperationCompleted
            End If
            Me.InvokeAsync("GETDATE_WORKING", New Object() {S_DATE, S_DATESpecified, days, daysSpecified}, Me.GETDATE_WORKINGOperationCompleted, userState)
        End Sub
        
        Private Sub OnGETDATE_WORKINGOperationCompleted(ByVal arg As Object)
            If (Not (Me.GETDATE_WORKINGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GETDATE_WORKINGCompleted(Me, New GETDATE_WORKINGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GETDATE_COUNT_DAY", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GETDATE_COUNT_DAY(ByVal S_DATE As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal S_DATESpecified As Boolean, ByVal E_DATE As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal E_DATESpecified As Boolean, ByRef GETDATE_COUNT_DAYResult As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef GETDATE_COUNT_DAYResultSpecified As Boolean)
            Dim results() As Object = Me.Invoke("GETDATE_COUNT_DAY", New Object() {S_DATE, S_DATESpecified, E_DATE, E_DATESpecified})
            GETDATE_COUNT_DAYResult = CType(results(0),Integer)
            GETDATE_COUNT_DAYResultSpecified = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_COUNT_DAYAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal E_DATE As Date, ByVal E_DATESpecified As Boolean)
            Me.GETDATE_COUNT_DAYAsync(S_DATE, S_DATESpecified, E_DATE, E_DATESpecified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_COUNT_DAYAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal E_DATE As Date, ByVal E_DATESpecified As Boolean, ByVal userState As Object)
            If (Me.GETDATE_COUNT_DAYOperationCompleted Is Nothing) Then
                Me.GETDATE_COUNT_DAYOperationCompleted = AddressOf Me.OnGETDATE_COUNT_DAYOperationCompleted
            End If
            Me.InvokeAsync("GETDATE_COUNT_DAY", New Object() {S_DATE, S_DATESpecified, E_DATE, E_DATESpecified}, Me.GETDATE_COUNT_DAYOperationCompleted, userState)
        End Sub
        
        Private Sub OnGETDATE_COUNT_DAYOperationCompleted(ByVal arg As Object)
            If (Not (Me.GETDATE_COUNT_DAYCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GETDATE_COUNT_DAYCompleted(Me, New GETDATE_COUNT_DAYCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    'CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BasicHttpsBinding_IService1", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class BasicHttpsBinding_IService1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GETDATE_WORKINGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GETDATE_COUNT_DAYOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "https://hal.fda.moph.go.th/WS_DATE/Service1.svc"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GETDATE_WORKINGCompleted As GETDATE_WORKINGCompletedEventHandler
        
        '''<remarks/>
        Public Event GETDATE_COUNT_DAYCompleted As GETDATE_COUNT_DAYCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GETDATE_WORKING", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GETDATE_WORKING(ByVal S_DATE As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal S_DATESpecified As Boolean, ByVal days As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal daysSpecified As Boolean, ByRef GETDATE_WORKINGResult As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef GETDATE_WORKINGResultSpecified As Boolean)
            Dim results() As Object = Me.Invoke("GETDATE_WORKING", New Object() {S_DATE, S_DATESpecified, days, daysSpecified})
            GETDATE_WORKINGResult = CType(results(0),Date)
            GETDATE_WORKINGResultSpecified = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_WORKINGAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal days As Integer, ByVal daysSpecified As Boolean)
            Me.GETDATE_WORKINGAsync(S_DATE, S_DATESpecified, days, daysSpecified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_WORKINGAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal days As Integer, ByVal daysSpecified As Boolean, ByVal userState As Object)
            If (Me.GETDATE_WORKINGOperationCompleted Is Nothing) Then
                Me.GETDATE_WORKINGOperationCompleted = AddressOf Me.OnGETDATE_WORKINGOperationCompleted
            End If
            Me.InvokeAsync("GETDATE_WORKING", New Object() {S_DATE, S_DATESpecified, days, daysSpecified}, Me.GETDATE_WORKINGOperationCompleted, userState)
        End Sub
        
        Private Sub OnGETDATE_WORKINGOperationCompleted(ByVal arg As Object)
            If (Not (Me.GETDATE_WORKINGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GETDATE_WORKINGCompleted(Me, New GETDATE_WORKINGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GETDATE_COUNT_DAY", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GETDATE_COUNT_DAY(ByVal S_DATE As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal S_DATESpecified As Boolean, ByVal E_DATE As Date, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal E_DATESpecified As Boolean, ByRef GETDATE_COUNT_DAYResult As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef GETDATE_COUNT_DAYResultSpecified As Boolean)
            Dim results() As Object = Me.Invoke("GETDATE_COUNT_DAY", New Object() {S_DATE, S_DATESpecified, E_DATE, E_DATESpecified})
            GETDATE_COUNT_DAYResult = CType(results(0),Integer)
            GETDATE_COUNT_DAYResultSpecified = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_COUNT_DAYAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal E_DATE As Date, ByVal E_DATESpecified As Boolean)
            Me.GETDATE_COUNT_DAYAsync(S_DATE, S_DATESpecified, E_DATE, E_DATESpecified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GETDATE_COUNT_DAYAsync(ByVal S_DATE As Date, ByVal S_DATESpecified As Boolean, ByVal E_DATE As Date, ByVal E_DATESpecified As Boolean, ByVal userState As Object)
            If (Me.GETDATE_COUNT_DAYOperationCompleted Is Nothing) Then
                Me.GETDATE_COUNT_DAYOperationCompleted = AddressOf Me.OnGETDATE_COUNT_DAYOperationCompleted
            End If
            Me.InvokeAsync("GETDATE_COUNT_DAY", New Object() {S_DATE, S_DATESpecified, E_DATE, E_DATESpecified}, Me.GETDATE_COUNT_DAYOperationCompleted, userState)
        End Sub
        
        Private Sub OnGETDATE_COUNT_DAYOperationCompleted(ByVal arg As Object)
            If (Not (Me.GETDATE_COUNT_DAYCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GETDATE_COUNT_DAYCompleted(Me, New GETDATE_COUNT_DAYCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GETDATE_WORKINGCompletedEventHandler(ByVal sender As Object, ByVal e As GETDATE_WORKINGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GETDATE_WORKINGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property GETDATE_WORKINGResult() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GETDATE_WORKINGResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GETDATE_COUNT_DAYCompletedEventHandler(ByVal sender As Object, ByVal e As GETDATE_COUNT_DAYCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GETDATE_COUNT_DAYCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property GETDATE_COUNT_DAYResult() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GETDATE_COUNT_DAYResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
End Namespace
